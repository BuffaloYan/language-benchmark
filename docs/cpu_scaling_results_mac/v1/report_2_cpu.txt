================================================================================
PARALLEL IMPLEMENTATION COMPARISON REPORT
================================================================================
Generated: 2025-06-07 19:07:08
Test Data: 10,000,000 random integers
Task: Parallel merge sort + prime counting
System: 8 CPU cores, Linux

OVERALL PERFORMANCE RANKINGS:
--------------------------------------------------------------------------------
Rank Implementation                 Type       Exec Time    Wall Time    Speedup 
--------------------------------------------------------------------------------
1    Rust Rayon                     Parallel     0.5771s      0.7497s     1.00x
2    C pthreads                     Parallel     0.6568s      0.8054s     0.88x
3    Java Fork-Join                 Parallel     1.0237s      1.5131s     0.56x
4    JavaScript SharedArrayBuffer   Parallel     1.0920s      2.1954s     0.53x
5    C Sequential                   Sequential   1.1428s      1.2890s     0.50x
6    Rust Sequential                Sequential   1.3532s      1.4884s     0.43x
7    Java Sequential                Sequential   1.4627s      1.9999s     0.39x
8    Go (optimized)                 Sequential   1.6359s      2.0135s     0.35x
9    Go (original)                  Sequential   1.7545s      2.1236s     0.33x
10   JavaScript Sequential          Sequential   1.9500s      3.0857s     0.30x
11   JavaScript Workers             Parallel     2.6740s      3.7885s     0.22x

PARALLEL EFFICIENCY ANALYSIS:
--------------------------------------------------------------------------------

Java:
  Parallel Implementation: Java Fork-Join
  Sequential Time:    1.4627s
  Parallel Time:      1.0237s
  Speedup:              1.43x
  Parallel Efficiency:  17.9%

C:
  Parallel Implementation: C pthreads
  Sequential Time:    1.1428s
  Parallel Time:      0.6568s
  Speedup:              1.74x
  Parallel Efficiency:  21.7%

Rust:
  Parallel Implementation: Rust Rayon
  Sequential Time:    1.3532s
  Parallel Time:      0.5771s
  Speedup:              2.34x
  Parallel Efficiency:  29.3%

JavaScript:
  Parallel Implementation: JavaScript Workers
  Sequential Time:    1.9500s
  Parallel Time:      2.6740s
  Speedup:              0.73x
  Parallel Efficiency:   9.1%

JavaScript Parallel Approaches Comparison:
  Sequential:         1.9500s (baseline)
  Worker Threads:     2.6740s (speedup: 0.73x, efficiency: 9.1%)
  SharedArrayBuffer:   1.0920s (speedup: 1.79x, efficiency: 22.3%)

Go Algorithm Comparison (Single-threaded):
  Original Algorithm:     1.7545s (memory allocating)
  Optimized Algorithm:    1.6359s (in-place)
  Improvement:               6.8% (1.07x speedup)

DETAILED RESULTS:
--------------------------------------------------------------------------------

Java Fork-Join:
  Status: SUCCESS
  Execution Time:   1.0237 seconds
  Wall Clock Time:   1.5131 seconds
  CPU Cores Used: 2
  Parallelism Level: 2

C pthreads:
  Status: SUCCESS
  Execution Time:   0.6568 seconds
  Wall Clock Time:   0.8054 seconds
  CPU Cores Used: 8

Rust Rayon:
  Status: SUCCESS
  Execution Time:   0.5771 seconds
  Wall Clock Time:   0.7497 seconds
  CPU Cores Used: 2
  Workers/Threads: 2

JavaScript Workers:
  Status: SUCCESS
  Execution Time:   2.6740 seconds
  Wall Clock Time:   3.7885 seconds
  CPU Cores Used: 8
  Workers/Threads: 8

JavaScript SharedArrayBuffer:
  Status: SUCCESS
  Execution Time:   1.0920 seconds
  Wall Clock Time:   2.1954 seconds
  CPU Cores Used: 8
  Workers/Threads: 8

Java Sequential:
  Status: SUCCESS
  Execution Time:   1.4627 seconds
  Wall Clock Time:   1.9999 seconds

Go (original):
  Status: SUCCESS
  Execution Time:   1.7545 seconds
  Wall Clock Time:   2.1236 seconds

Go (optimized):
  Status: SUCCESS
  Execution Time:   1.6359 seconds
  Wall Clock Time:   2.0135 seconds

C Sequential:
  Status: SUCCESS
  Execution Time:   1.1428 seconds
  Wall Clock Time:   1.2890 seconds

Rust Sequential:
  Status: SUCCESS
  Execution Time:   1.3532 seconds
  Wall Clock Time:   1.4884 seconds

JavaScript Sequential:
  Status: SUCCESS
  Execution Time:   1.9500 seconds
  Wall Clock Time:   3.0857 seconds

PERFORMANCE SUMMARY:
--------------------------------------------------------------------------------
Execution Times:
  Fastest:   0.5771s
  Slowest:   2.6740s
  Average:   1.3930s
  Range:       4.63x difference

Wall Clock Times:
  Fastest:   0.7497s
  Slowest:   3.7885s
  Average:   1.9138s
  Range:       5.05x difference

SYSTEM INFORMATION:
--------------------------------------------------------------------------------
CPU Cores: 8
Platform: Linux
OS: Linux 6.10.14-linuxkit
Architecture: aarch64
Python Version: 3.11.0rc1

================================================================================
End of Report
================================================================================