================================================================================
PARALLEL IMPLEMENTATION COMPARISON REPORT
================================================================================
Generated: 2025-06-07 19:07:41
Test Data: 10,000,000 random integers
Task: Parallel merge sort + prime counting
System: 8 CPU cores, Linux

OVERALL PERFORMANCE RANKINGS:
--------------------------------------------------------------------------------
Rank Implementation                 Type       Exec Time    Wall Time    Speedup 
--------------------------------------------------------------------------------
1    C pthreads                     Parallel     0.2638s      0.4126s     1.00x
2    Rust Rayon                     Parallel     0.3152s      0.4514s     0.84x
3    Java Fork-Join                 Parallel     0.4931s      0.9238s     0.53x
4    JavaScript SharedArrayBuffer   Parallel     0.8576s      1.9788s     0.31x
5    C Sequential                   Sequential   1.1343s      1.2804s     0.23x
6    Rust Sequential                Sequential   1.3555s      1.4913s     0.19x
7    Java Sequential                Sequential   1.4730s      1.8729s     0.18x
8    Go (optimized)                 Sequential   1.6386s      2.0029s     0.16x
9    Go (original)                  Sequential   1.8403s      2.2216s     0.14x
10   JavaScript Sequential          Sequential   1.9690s      3.1154s     0.13x
11   JavaScript Workers             Parallel     2.3950s      3.4792s     0.11x

PARALLEL EFFICIENCY ANALYSIS:
--------------------------------------------------------------------------------

Java:
  Parallel Implementation: Java Fork-Join
  Sequential Time:    1.4730s
  Parallel Time:      0.4931s
  Speedup:              2.99x
  Parallel Efficiency:  37.3%

C:
  Parallel Implementation: C pthreads
  Sequential Time:    1.1343s
  Parallel Time:      0.2638s
  Speedup:              4.30x
  Parallel Efficiency:  53.7%

Rust:
  Parallel Implementation: Rust Rayon
  Sequential Time:    1.3555s
  Parallel Time:      0.3152s
  Speedup:              4.30x
  Parallel Efficiency:  53.8%

JavaScript:
  Parallel Implementation: JavaScript Workers
  Sequential Time:    1.9690s
  Parallel Time:      2.3950s
  Speedup:              0.82x
  Parallel Efficiency:  10.3%

JavaScript Parallel Approaches Comparison:
  Sequential:         1.9690s (baseline)
  Worker Threads:     2.3950s (speedup: 0.82x, efficiency: 10.3%)
  SharedArrayBuffer:   0.8576s (speedup: 2.30x, efficiency: 28.7%)

Go Algorithm Comparison (Single-threaded):
  Original Algorithm:     1.8403s (memory allocating)
  Optimized Algorithm:    1.6386s (in-place)
  Improvement:              11.0% (1.12x speedup)

DETAILED RESULTS:
--------------------------------------------------------------------------------

Java Fork-Join:
  Status: SUCCESS
  Execution Time:   0.4931 seconds
  Wall Clock Time:   0.9238 seconds
  CPU Cores Used: 4
  Parallelism Level: 4

C pthreads:
  Status: SUCCESS
  Execution Time:   0.2638 seconds
  Wall Clock Time:   0.4126 seconds
  CPU Cores Used: 8

Rust Rayon:
  Status: SUCCESS
  Execution Time:   0.3152 seconds
  Wall Clock Time:   0.4514 seconds
  CPU Cores Used: 4
  Workers/Threads: 4

JavaScript Workers:
  Status: SUCCESS
  Execution Time:   2.3950 seconds
  Wall Clock Time:   3.4792 seconds
  CPU Cores Used: 8
  Workers/Threads: 8

JavaScript SharedArrayBuffer:
  Status: SUCCESS
  Execution Time:   0.8576 seconds
  Wall Clock Time:   1.9788 seconds
  CPU Cores Used: 8
  Workers/Threads: 8

Java Sequential:
  Status: SUCCESS
  Execution Time:   1.4730 seconds
  Wall Clock Time:   1.8729 seconds

Go (original):
  Status: SUCCESS
  Execution Time:   1.8403 seconds
  Wall Clock Time:   2.2216 seconds

Go (optimized):
  Status: SUCCESS
  Execution Time:   1.6386 seconds
  Wall Clock Time:   2.0029 seconds

C Sequential:
  Status: SUCCESS
  Execution Time:   1.1343 seconds
  Wall Clock Time:   1.2804 seconds

Rust Sequential:
  Status: SUCCESS
  Execution Time:   1.3555 seconds
  Wall Clock Time:   1.4913 seconds

JavaScript Sequential:
  Status: SUCCESS
  Execution Time:   1.9690 seconds
  Wall Clock Time:   3.1154 seconds

PERFORMANCE SUMMARY:
--------------------------------------------------------------------------------
Execution Times:
  Fastest:   0.2638s
  Slowest:   2.3950s
  Average:   1.2487s
  Range:       9.08x difference

Wall Clock Times:
  Fastest:   0.4126s
  Slowest:   3.4792s
  Average:   1.7482s
  Range:       8.43x difference

SYSTEM INFORMATION:
--------------------------------------------------------------------------------
CPU Cores: 8
Platform: Linux
OS: Linux 6.10.14-linuxkit
Architecture: aarch64
Python Version: 3.11.0rc1

================================================================================
End of Report
================================================================================