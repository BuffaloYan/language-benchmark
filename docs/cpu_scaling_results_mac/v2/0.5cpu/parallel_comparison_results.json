{
  "timestamp": "2025-06-11T02:36:37.247602",
  "system_info": {
    "cpu_cores": 8,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 3.6042,
      "wall_time": 5.510292053222656,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 1\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 2.1809 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 1.4233 seconds\n\ud83c\udfaf Found 665,137 prime numbers\n\u23f1\ufe0f  Total execution time: 3.6042 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 1\n- Active thread count: 1\n- Steal count: 1\n",
      "parallelism_info": {
        "cores": 1,
        "parallelism": 1,
        "steal_count": 1
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 2.7109,
      "wall_time": 3.082043409347534,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 8\nMax recursion depth: 5\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 1.6155 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 1.0954 seconds\n\ud83d\udcca Found 665137 prime numbers\n\u23f1\ufe0f  Total execution time: 2.7109 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 1.6155 seconds\n- Prime time: 1.0954 seconds\n- Total time: 2.7109 seconds\n- CPU cores used: 8\n",
      "parallelism_info": {
        "cores": 8
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 2.6063,
      "wall_time": 2.9240763187408447,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 1\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 10000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.8810 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 1.7253 seconds\n[RESULT] Found 665137 prime numbers\n[TIME] Total execution time: 2.6063 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 1\n- Sequential threshold: 10,000 elements\n- Sort time: 0.8810s\n- Prime time: 1.7253s\n",
      "parallelism_info": {
        "cores": 1,
        "workers": 1
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 5.235,
      "wall_time": 11.895944833755493,
      "stdout": "\ud83d\udd27 Creating optimized worker pool with 8 workers\n[OPTIMIZED PARALLEL] JavaScript Optimized Parallel Merge Sort + Prime Counting\n==============================================================================\nAvailable CPU cores: 8\nWorker pool size: 8\nMinimum chunk size: 50,000 elements\n\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n[OVERHEAD] Data size: 75.24 MB\n[OVERHEAD] Per-worker transfer: 9.40 MB\n\n[SORT] Starting optimized parallel merge sort...\n[CHUNKS] Divided 10,000,000 elements into 8 chunks\n[CHUNKS] Average chunk size: 1,250,000 elements\n[PARALLEL] Chunk sorting completed in 5.2350 seconds\n[MERGE] Final merge completed in 0.3830 seconds\n[SUCCESS] Optimized parallel merge sort completed in 5.8890 seconds\n[VERIFY] Sorting verified: true\n[PRIME] Starting parallel prime counting...\n[PRIME CHUNKS] Divided into 8 chunks for prime counting\n[PRIME CHUNKS] Average chunk size: 1,250,000 elements\n[SUCCESS] Parallel prime counting completed in 3.0060 seconds\nFound 665,137 prime numbers\n\n[TOTAL] Execution time: 8.8950 seconds\n[ANALYSIS] Expected speedup: 4.0x (theoretical maximum)\n",
      "parallelism_info": {
        "cores": 8,
        "workers": 8
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 4.7625,
      "wall_time": 7.491189002990723,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 8\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 10,000,000 integers\n   - Workers: 8\n   - Sequential threshold: 50,000\n   - Shared memory: 38.1 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 2.7661 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 1.9963 seconds\n[RESULT] Found 665,137 prime numbers\n\n[TIME] Total execution time: 4.7625 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 8\n- Sequential threshold: 50,000\n- Shared memory size: 38.1 MB\n- Sort time: 2.7661s\n- Prime time: 1.9963s\n",
      "parallelism_info": {
        "cores": 8,
        "workers": 8
      }
    },
    "Go Parallel": {
      "success": true,
      "execution_time": 3.9116,
      "wall_time": 4.716815233230591,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nProcessors: 1\nGOMAXPROCS: 1\nStarting parallel merge sort...\nGo parallel merge sort completed in 2.2994 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6122 seconds\nFound 665137 prime numbers\nTotal execution time: 3.9116 seconds\n",
      "parallelism_info": {
        "cores": 1
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 3.459,
      "wall_time": 5.358942985534668,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 2.1238 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.3352 seconds\nFound 665,137 prime numbers\nTotal execution time: 3.4590 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 3.742,
      "wall_time": 4.593284606933594,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 2.1196 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6224 seconds\nFound 665137 prime numbers\nTotal execution time: 3.7420 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 1.367,
      "wall_time": 3.0443975925445557,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nC merge sort completed in 0.8146 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.5524 seconds\nFound 665137 prime numbers\nTotal execution time: 1.3670 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 3.2127,
      "wall_time": 3.5814261436462402,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nRust merge sort completed in 1.8956 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.3171 seconds\nFound 665137 prime numbers\nTotal execution time: 3.2127 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 4.573,
      "wall_time": 7.321869611740112,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 2.8570 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.7160 seconds\nFound 665,137 prime numbers\nTotal execution time: 4.5730 seconds\n",
      "parallelism_info": {}
    }
  }
}