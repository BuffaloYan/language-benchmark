{
  "timestamp": "2025-06-11T02:37:25.712841",
  "system_info": {
    "cpu_cores": 8,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 0.8312,
      "wall_time": 1.4124832153320312,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 2\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.5181 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.3130 seconds\n\ud83c\udfaf Found 665,137 prime numbers\n\u23f1\ufe0f  Total execution time: 0.8312 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 2\n- Active thread count: 0\n- Steal count: 5\n",
      "parallelism_info": {
        "cores": 2,
        "parallelism": 2,
        "steal_count": 5
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 0.5986,
      "wall_time": 0.7635326385498047,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 8\nMax recursion depth: 5\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.3656 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.2331 seconds\n\ud83d\udcca Found 665137 prime numbers\n\u23f1\ufe0f  Total execution time: 0.5986 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.3656 seconds\n- Prime time: 0.2331 seconds\n- Total time: 0.5986 seconds\n- CPU cores used: 8\n",
      "parallelism_info": {
        "cores": 8
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 0.5893,
      "wall_time": 0.7397217750549316,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 2\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 10000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.1992 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.3901 seconds\n[RESULT] Found 665137 prime numbers\n[TIME] Total execution time: 0.5893 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 2\n- Sequential threshold: 10,000 elements\n- Sort time: 0.1992s\n- Prime time: 0.3901s\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 1.326,
      "wall_time": 3.4822838306427,
      "stdout": "\ud83d\udd27 Creating optimized worker pool with 8 workers\n[OPTIMIZED PARALLEL] JavaScript Optimized Parallel Merge Sort + Prime Counting\n==============================================================================\nAvailable CPU cores: 8\nWorker pool size: 8\nMinimum chunk size: 50,000 elements\n\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n[OVERHEAD] Data size: 75.24 MB\n[OVERHEAD] Per-worker transfer: 9.40 MB\n\n[SORT] Starting optimized parallel merge sort...\n[CHUNKS] Divided 10,000,000 elements into 8 chunks\n[CHUNKS] Average chunk size: 1,250,000 elements\n[PARALLEL] Chunk sorting completed in 1.3260 seconds\n[MERGE] Final merge completed in 0.1550 seconds\n[SUCCESS] Optimized parallel merge sort completed in 1.5400 seconds\n[VERIFY] Sorting verified: true\n[PRIME] Starting parallel prime counting...\n[PRIME CHUNKS] Divided into 8 chunks for prime counting\n[PRIME CHUNKS] Average chunk size: 1,250,000 elements\n[SUCCESS] Parallel prime counting completed in 0.6860 seconds\nFound 665,137 prime numbers\n\n[TOTAL] Execution time: 2.2260 seconds\n[ANALYSIS] Expected speedup: 4.0x (theoretical maximum)\n",
      "parallelism_info": {
        "cores": 8,
        "workers": 8
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 1.0756,
      "wall_time": 2.203641653060913,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 8\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 10,000,000 integers\n   - Workers: 8\n   - Sequential threshold: 50,000\n   - Shared memory: 38.1 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.6281 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.4475 seconds\n[RESULT] Found 665,137 prime numbers\n\n[TIME] Total execution time: 1.0756 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 8\n- Sequential threshold: 50,000\n- Shared memory size: 38.1 MB\n- Sort time: 0.6281s\n- Prime time: 0.4475s\n",
      "parallelism_info": {
        "cores": 8,
        "workers": 8
      }
    },
    "Go Parallel": {
      "success": true,
      "execution_time": 0.9304,
      "wall_time": 1.3080503940582275,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nProcessors: 2\nGOMAXPROCS: 2\nStarting parallel merge sort...\nGo parallel merge sort completed in 0.4888 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4416 seconds\nFound 665137 prime numbers\nTotal execution time: 0.9304 seconds\n",
      "parallelism_info": {
        "cores": 2
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 1.4887,
      "wall_time": 2.0484282970428467,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 0.8842 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.6046 seconds\nFound 665,137 prime numbers\nTotal execution time: 1.4887 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 1.6606,
      "wall_time": 2.0265402793884277,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 0.9473 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.7133 seconds\nFound 665137 prime numbers\nTotal execution time: 1.6606 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 1.1432,
      "wall_time": 1.3081934452056885,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nC merge sort completed in 0.6797 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4636 seconds\nFound 665137 prime numbers\nTotal execution time: 1.1432 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 1.3552,
      "wall_time": 1.509831190109253,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nRust merge sort completed in 0.7939 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.5613 seconds\nFound 665137 prime numbers\nTotal execution time: 1.3552 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 1.976,
      "wall_time": 3.143352746963501,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 1.2360 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.7400 seconds\nFound 665,137 prime numbers\nTotal execution time: 1.9760 seconds\n",
      "parallelism_info": {}
    }
  }
}