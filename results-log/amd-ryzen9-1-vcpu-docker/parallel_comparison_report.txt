================================================================================
PARALLEL IMPLEMENTATION COMPARISON REPORT
================================================================================
Generated: 2025-06-11 01:26:25
Test Data: 10,000,000 random integers
Task: Parallel merge sort + prime counting
System: 6 CPU cores, Linux

OVERALL PERFORMANCE RANKINGS:
--------------------------------------------------------------------------------
Rank Implementation                 Type       Exec Time    Wall Time    Speedup 
--------------------------------------------------------------------------------
1    C Sequential                   Sequential   1.6390s      1.8736s     1.00x
2    Rust Rayon                     Parallel     1.6714s      1.8350s     0.98x
3    C pthreads                     Parallel     1.6991s      1.9174s     0.96x
4    Rust Sequential                Sequential   1.8118s      1.9616s     0.90x
5    Go (optimized)                 Sequential   1.9131s      2.5652s     0.86x
6    Go Parallel                    Parallel     1.9625s      2.8442s     0.84x
7    Java Sequential                Sequential   2.1303s      3.3284s     0.77x
8    Java Fork-Join                 Parallel     2.2507s      3.8884s     0.73x
9    JavaScript Sequential          Sequential   2.8120s      4.9134s     0.58x
10   JavaScript SharedArrayBuffer   Parallel     2.9353s      4.9220s     0.56x
11   JavaScript Workers             Parallel     5.4100s     10.5904s     0.30x

PARALLEL EFFICIENCY ANALYSIS:
--------------------------------------------------------------------------------

Java:
  Parallel Implementation: Java Fork-Join
  Sequential Time:    2.1303s
  Parallel Time:      2.2507s
  Speedup:              0.95x
  Parallel Efficiency:  15.8%

C:
  Parallel Implementation: C pthreads
  Sequential Time:    1.6390s
  Parallel Time:      1.6991s
  Speedup:              0.96x
  Parallel Efficiency:  16.1%

Rust:
  Parallel Implementation: Rust Rayon
  Sequential Time:    1.8118s
  Parallel Time:      1.6714s
  Speedup:              1.08x
  Parallel Efficiency:  18.1%

JavaScript:
  Parallel Implementation: JavaScript Workers
  Sequential Time:    2.8120s
  Parallel Time:      5.4100s
  Speedup:              0.52x
  Parallel Efficiency:   8.7%

JavaScript Parallel Approaches Comparison:
  Sequential:         2.8120s (baseline)
  Worker Threads:     5.4100s (speedup: 0.52x, efficiency: 8.7%)
  SharedArrayBuffer:   2.9353s (speedup: 0.96x, efficiency: 16.0%)

Go Parallel vs Sequential Comparison:
  Sequential (optimized):   1.9131s (in-place algorithm)
  Parallel (goroutines):    1.9625s (parallel merge sort)
  Speedup:                   0.97x
  Parallel Efficiency:       16.2%

DETAILED RESULTS:
--------------------------------------------------------------------------------

Java Fork-Join:
  Status: SUCCESS
  Execution Time:   2.2507 seconds
  Wall Clock Time:   3.8884 seconds
  CPU Cores Used: 1
  Parallelism Level: 1

C pthreads:
  Status: SUCCESS
  Execution Time:   1.6991 seconds
  Wall Clock Time:   1.9174 seconds
  CPU Cores Used: 6

Rust Rayon:
  Status: SUCCESS
  Execution Time:   1.6714 seconds
  Wall Clock Time:   1.8350 seconds
  CPU Cores Used: 1
  Workers/Threads: 1

JavaScript Workers:
  Status: SUCCESS
  Execution Time:   5.4100 seconds
  Wall Clock Time:  10.5904 seconds
  CPU Cores Used: 6
  Workers/Threads: 6

JavaScript SharedArrayBuffer:
  Status: SUCCESS
  Execution Time:   2.9353 seconds
  Wall Clock Time:   4.9220 seconds
  CPU Cores Used: 6
  Workers/Threads: 6

Go Parallel:
  Status: SUCCESS
  Execution Time:   1.9625 seconds
  Wall Clock Time:   2.8442 seconds
  CPU Cores Used: 6

Java Sequential:
  Status: SUCCESS
  Execution Time:   2.1303 seconds
  Wall Clock Time:   3.3284 seconds

Go (optimized):
  Status: SUCCESS
  Execution Time:   1.9131 seconds
  Wall Clock Time:   2.5652 seconds

C Sequential:
  Status: SUCCESS
  Execution Time:   1.6390 seconds
  Wall Clock Time:   1.8736 seconds

Rust Sequential:
  Status: SUCCESS
  Execution Time:   1.8118 seconds
  Wall Clock Time:   1.9616 seconds

JavaScript Sequential:
  Status: SUCCESS
  Execution Time:   2.8120 seconds
  Wall Clock Time:   4.9134 seconds

PERFORMANCE SUMMARY:
--------------------------------------------------------------------------------
Execution Times:
  Fastest:   1.6390s
  Slowest:   5.4100s
  Average:   2.3850s
  Range:       3.30x difference

Wall Clock Times:
  Fastest:   1.8350s
  Slowest:  10.5904s
  Average:   3.6945s
  Range:       5.77x difference

SYSTEM INFORMATION:
--------------------------------------------------------------------------------
CPU Cores: 6
Platform: Linux
OS: Linux 5.15.167.4-microsoft-standard-WSL2
Architecture: x86_64
Python Version: 3.11.0rc1

================================================================================
End of Report
================================================================================