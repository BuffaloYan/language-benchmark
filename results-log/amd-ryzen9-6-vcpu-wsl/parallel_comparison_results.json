{
  "timestamp": "2025-06-07T10:10:20.882913",
  "system_info": {
    "cpu_cores": 6,
    "platform": "Linux",
    "python_version": "3.12.7"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 0.4621,
      "wall_time": 2.059159994125366,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 6\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.2541 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.2080 seconds\n\ud83c\udfaf Found 666,464 prime numbers\n\u23f1\ufe0f  Total execution time: 0.4621 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 6\n- Active thread count: 0\n- Steal count: 27\n",
      "parallelism_info": {
        "cores": 6,
        "parallelism": 6,
        "steal_count": 27
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 0.4148,
      "wall_time": 2.333279609680176,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 6\nMax recursion depth: 4\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.1672 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.2476 seconds\n\ud83d\udcca Found 666464 prime numbers\n\u23f1\ufe0f  Total execution time: 0.4148 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.1672 seconds\n- Prime time: 0.2476 seconds\n- Total time: 0.4148 seconds\n- CPU cores used: 6\n",
      "parallelism_info": {
        "cores": 6
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 0.3427,
      "wall_time": 1.4966638088226318,
      "stdout": "\ud83e\udd80 Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 6\nParallel threshold: 10,000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.1215 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.2212 seconds\n\ud83c\udfaf Found 666464 prime numbers\n\u23f1\ufe0f  Total execution time: 0.3427 seconds\n\n\ud83d\udcc8 Performance Details:\n- Rayon thread pool size: 6\n- Sequential threshold: 10,000 elements\n- Sort time: 0.1215s\n- Prime time: 0.2212s\n",
      "parallelism_info": {
        "cores": 6,
        "workers": 6
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 3.856,
      "wall_time": 5.497847318649292,
      "stdout": "\ud83d\udd27 Creating worker pool with 6 workers\n\ud83d\ude80 JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 6\nWorker pool size: 6\nParallel threshold: 10,000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 3.4610 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\ud83d\udce6 Divided into 6 chunks for prime counting\n\u2705 Parallel prime counting completed in 0.3950 seconds\n\ud83c\udfaf Found 666,464 prime numbers\n\u23f1\ufe0f  Total execution time: 3.8560 seconds\n\n\ud83d\udcc8 Performance Details:\n- Active workers: 6\n- Completed tasks: 6\n",
      "parallelism_info": {
        "cores": 6,
        "workers": 6
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 1.0108,
      "wall_time": 2.4942879676818848,
      "stdout": "\ud83d\ude80 JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 6\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 10,000,000 integers\n   - Workers: 6\n   - Sequential threshold: 50,000\n   - Shared memory: 38.1 MB\n\n\ud83d\udd04 Starting SharedArrayBuffer parallel merge sort...\n\u2705 Parallel merge sort completed in 0.6524 seconds\n\ud83d\udd0d Sorting verified: true\n\n\ud83d\udd22 Starting SharedArrayBuffer parallel prime counting...\n\u2705 Parallel prime counting completed in 0.3583 seconds\n\ud83c\udfaf Found 666,464 prime numbers\n\n\u23f1\ufe0f  Total execution time: 1.0108 seconds\n\n\ud83d\udcc8 Performance Details:\n- Workers used: 6\n- Sequential threshold: 50,000\n- Shared memory size: 38.1 MB\n- Sort time: 0.6524s\n- Prime time: 0.3583s\n",
      "parallelism_info": {
        "cores": 6,
        "workers": 6
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 1.9368,
      "wall_time": 2.629697561264038,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 0.8988 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.0380 seconds\nFound 666,464 prime numbers\nTotal execution time: 1.9368 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 2.162,
      "wall_time": 4.631750822067261,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo merge sort completed in 0.9703 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.1917 seconds\nFound 666464 prime numbers\nTotal execution time: 2.1620 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 1.9212,
      "wall_time": 4.350619792938232,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 0.7341 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.1871 seconds\nFound 666464 prime numbers\nTotal execution time: 1.9212 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 1.6144,
      "wall_time": 3.6650068759918213,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nC merge sort completed in 0.6203 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.9941 seconds\nFound 666464 prime numbers\nTotal execution time: 1.6144 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 1.8185,
      "wall_time": 2.9449214935302734,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nRust merge sort completed in 0.7862 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.0322 seconds\nFound 666464 prime numbers\nTotal execution time: 1.8185 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 2.058,
      "wall_time": 3.6949656009674072,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 1.3470 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.7110 seconds\nFound 666,464 prime numbers\nTotal execution time: 2.0580 seconds\n",
      "parallelism_info": {}
    }
  }
}