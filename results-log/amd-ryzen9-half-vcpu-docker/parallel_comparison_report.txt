================================================================================
PARALLEL IMPLEMENTATION COMPARISON REPORT
================================================================================
Generated: 2025-06-11 01:34:47
Test Data: 10,000,000 random integers
Task: Parallel merge sort + prime counting
System: 6 CPU cores, Linux

OVERALL PERFORMANCE RANKINGS:
--------------------------------------------------------------------------------
Rank Implementation                 Type       Exec Time    Wall Time    Speedup 
--------------------------------------------------------------------------------
1    C Sequential                   Sequential   1.6463s      3.7765s     1.00x
2    C pthreads                     Parallel     3.4584s      3.8787s     0.48x
3    Rust Sequential                Sequential   3.5100s      3.8167s     0.47x
4    Rust Rayon                     Parallel     3.5606s      3.9020s     0.46x
5    Go (optimized)                 Sequential   3.7956s      5.0206s     0.43x
6    Java Sequential                Sequential   4.1319s      6.7809s     0.40x
7    Go Parallel                    Parallel     4.3846s      5.9688s     0.38x
8    Java Fork-Join                 Parallel     4.5088s      7.7225s     0.37x
9    JavaScript Sequential          Sequential   5.3250s      9.8134s     0.31x
10   JavaScript SharedArrayBuffer   Parallel     6.1831s      9.9357s     0.27x
11   JavaScript Workers             Parallel    11.0690s     21.1692s     0.15x

PARALLEL EFFICIENCY ANALYSIS:
--------------------------------------------------------------------------------

Java:
  Parallel Implementation: Java Fork-Join
  Sequential Time:    4.1319s
  Parallel Time:      4.5088s
  Speedup:              0.92x
  Parallel Efficiency:  15.3%

C:
  Parallel Implementation: C pthreads
  Sequential Time:    1.6463s
  Parallel Time:      3.4584s
  Speedup:              0.48x
  Parallel Efficiency:   7.9%

Rust:
  Parallel Implementation: Rust Rayon
  Sequential Time:    3.5100s
  Parallel Time:      3.5606s
  Speedup:              0.99x
  Parallel Efficiency:  16.4%

JavaScript:
  Parallel Implementation: JavaScript Workers
  Sequential Time:    5.3250s
  Parallel Time:     11.0690s
  Speedup:              0.48x
  Parallel Efficiency:   8.0%

JavaScript Parallel Approaches Comparison:
  Sequential:         5.3250s (baseline)
  Worker Threads:    11.0690s (speedup: 0.48x, efficiency: 8.0%)
  SharedArrayBuffer:   6.1831s (speedup: 0.86x, efficiency: 14.4%)

Go Parallel vs Sequential Comparison:
  Sequential (optimized):   3.7956s (in-place algorithm)
  Parallel (goroutines):    4.3846s (parallel merge sort)
  Speedup:                   0.87x
  Parallel Efficiency:       14.4%

DETAILED RESULTS:
--------------------------------------------------------------------------------

Java Fork-Join:
  Status: SUCCESS
  Execution Time:   4.5088 seconds
  Wall Clock Time:   7.7225 seconds
  CPU Cores Used: 1
  Parallelism Level: 1

C pthreads:
  Status: SUCCESS
  Execution Time:   3.4584 seconds
  Wall Clock Time:   3.8787 seconds
  CPU Cores Used: 6

Rust Rayon:
  Status: SUCCESS
  Execution Time:   3.5606 seconds
  Wall Clock Time:   3.9020 seconds
  CPU Cores Used: 1
  Workers/Threads: 1

JavaScript Workers:
  Status: SUCCESS
  Execution Time:  11.0690 seconds
  Wall Clock Time:  21.1692 seconds
  CPU Cores Used: 6
  Workers/Threads: 6

JavaScript SharedArrayBuffer:
  Status: SUCCESS
  Execution Time:   6.1831 seconds
  Wall Clock Time:   9.9357 seconds
  CPU Cores Used: 6
  Workers/Threads: 6

Go Parallel:
  Status: SUCCESS
  Execution Time:   4.3846 seconds
  Wall Clock Time:   5.9688 seconds
  CPU Cores Used: 6

Java Sequential:
  Status: SUCCESS
  Execution Time:   4.1319 seconds
  Wall Clock Time:   6.7809 seconds

Go (optimized):
  Status: SUCCESS
  Execution Time:   3.7956 seconds
  Wall Clock Time:   5.0206 seconds

C Sequential:
  Status: SUCCESS
  Execution Time:   1.6463 seconds
  Wall Clock Time:   3.7765 seconds

Rust Sequential:
  Status: SUCCESS
  Execution Time:   3.5100 seconds
  Wall Clock Time:   3.8167 seconds

JavaScript Sequential:
  Status: SUCCESS
  Execution Time:   5.3250 seconds
  Wall Clock Time:   9.8134 seconds

PERFORMANCE SUMMARY:
--------------------------------------------------------------------------------
Execution Times:
  Fastest:   1.6463s
  Slowest:  11.0690s
  Average:   4.6885s
  Range:       6.72x difference

Wall Clock Times:
  Fastest:   3.7765s
  Slowest:  21.1692s
  Average:   7.4350s
  Range:       5.61x difference

SYSTEM INFORMATION:
--------------------------------------------------------------------------------
CPU Cores: 6
Platform: Linux
OS: Linux 5.15.167.4-microsoft-standard-WSL2
Architecture: x86_64
Python Version: 3.11.0rc1

================================================================================
End of Report
================================================================================