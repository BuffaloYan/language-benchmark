================================================================================
PARALLEL IMPLEMENTATION COMPARISON REPORT
================================================================================
Generated: 2025-06-08 12:48:07
Test Data: 10,000,000 random integers
Task: Parallel merge sort + prime counting
System: 1 CPU cores, Linux

OVERALL PERFORMANCE RANKINGS:
--------------------------------------------------------------------------------
Rank Implementation                 Type       Exec Time    Wall Time    Speedup 
--------------------------------------------------------------------------------
1    C pthreads                     Sequential   2.0572s      2.3330s     1.00x
2    C Sequential                   Sequential   2.0838s      2.3950s     0.99x
3    Rust Sequential                Sequential   2.3498s      2.6058s     0.88x
4    Rust Rayon                     Parallel     2.4635s      2.6913s     0.84x
5    JavaScript Sequential          Sequential   3.9100s      6.4943s     0.53x
6    JavaScript SharedArrayBuffer   Parallel     4.7067s      9.5210s     0.44x
7    Go (optimized)                 Sequential   5.6019s      6.7348s     0.37x
8    Go (original)                  Sequential   5.9853s      6.9396s     0.34x

PARALLEL EFFICIENCY ANALYSIS:
--------------------------------------------------------------------------------

Java:
  Parallel Implementation: JavaScript SharedArrayBuffer
  Sequential Time:    3.9100s
  Parallel Time:      4.7067s
  Speedup:              0.83x
  Parallel Efficiency:  83.1%

Rust:
  Parallel Implementation: Rust Rayon
  Sequential Time:    2.3498s
  Parallel Time:      2.4635s
  Speedup:              0.95x
  Parallel Efficiency:  95.4%

JavaScript:
  Parallel Implementation: JavaScript SharedArrayBuffer
  Sequential Time:    3.9100s
  Parallel Time:      4.7067s
  Speedup:              0.83x
  Parallel Efficiency:  83.1%

JavaScript Parallel Approaches Comparison:
  Sequential:         3.9100s (baseline)
  SharedArrayBuffer:   4.7067s (speedup: 0.83x, efficiency: 83.1%)

Go Algorithm Comparison (Single-threaded):
  Original Algorithm:     5.9853s (memory allocating)
  Optimized Algorithm:    5.6019s (in-place)
  Improvement:               6.4% (1.07x speedup)

DETAILED RESULTS:
--------------------------------------------------------------------------------

Java Fork-Join:
  Status: FAILED
  Error: Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOfRange(Arrays.java:3822)
	at java.base/java.lang.StringLatin1.newString(StringLatin1.java:769)
	at java.base/java.lang.String.substring(String.java:2714)
	at java.base/java.lang.String.split(String.java:3127)
	at java.base/java.lang.String.split(String.java:3201)
	at ParallelMergeSort.loadData(ParallelMergeSort.java:139)
	at ParallelMergeSort.main(ParallelMergeSort.java:170)


C pthreads:
  Status: SUCCESS
  Execution Time:   2.0572 seconds
  Wall Clock Time:   2.3330 seconds
  CPU Cores Used: 1

Rust Rayon:
  Status: SUCCESS
  Execution Time:   2.4635 seconds
  Wall Clock Time:   2.6913 seconds
  CPU Cores Used: 1
  Workers/Threads: 1

JavaScript Workers:
  Status: FAILED
  Error: Timeout
  Timeout: 300s

JavaScript SharedArrayBuffer:
  Status: SUCCESS
  Execution Time:   4.7067 seconds
  Wall Clock Time:   9.5210 seconds
  CPU Cores Used: 1
  Workers/Threads: 1

Java Sequential:
  Status: FAILED
  Error: Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOfRange(Arrays.java:3822)
	at java.base/java.lang.StringLatin1.newString(StringLatin1.java:769)
	at java.base/java.lang.String.substring(String.java:2714)
	at java.base/java.lang.String.split(String.java:3127)
	at java.base/java.lang.String.split(String.java:3201)
	at MergeSort.loadData(MergeSort.java:57)
	at MergeSort.main(MergeSort.java:111)


Go (original):
  Status: SUCCESS
  Execution Time:   5.9853 seconds
  Wall Clock Time:   6.9396 seconds

Go (optimized):
  Status: SUCCESS
  Execution Time:   5.6019 seconds
  Wall Clock Time:   6.7348 seconds

C Sequential:
  Status: SUCCESS
  Execution Time:   2.0838 seconds
  Wall Clock Time:   2.3950 seconds

Rust Sequential:
  Status: SUCCESS
  Execution Time:   2.3498 seconds
  Wall Clock Time:   2.6058 seconds

JavaScript Sequential:
  Status: SUCCESS
  Execution Time:   3.9100 seconds
  Wall Clock Time:   6.4943 seconds

PERFORMANCE SUMMARY:
--------------------------------------------------------------------------------
Execution Times:
  Fastest:   2.0572s
  Slowest:   5.9853s
  Average:   3.6448s
  Range:       2.91x difference

Wall Clock Times:
  Fastest:   2.3330s
  Slowest:   9.5210s
  Average:   4.9644s
  Range:       4.08x difference

SYSTEM INFORMATION:
--------------------------------------------------------------------------------
CPU Cores: 1
Platform: Linux
OS: Linux 6.1.134-152.225.amzn2023.x86_64
Architecture: x86_64
Python Version: 3.11.0rc1

================================================================================
End of Report
================================================================================