{
  "timestamp": "2025-06-10T04:47:17.187972",
  "system_info": {
    "cpu_cores": 4,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 2.5737,
      "wall_time": 4.479234218597412,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 4\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 1.0103 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 1.5634 seconds\n\ud83c\udfaf Found 663,625 prime numbers\n\u23f1\ufe0f  Total execution time: 2.5737 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 4\n- Active thread count: 0\n- Steal count: 19\n",
      "parallelism_info": {
        "cores": 4,
        "parallelism": 4,
        "steal_count": 19
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 1.4831,
      "wall_time": 1.994025468826294,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 4\nMax recursion depth: 4\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.5449 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.9381 seconds\n\ud83d\udcca Found 663625 prime numbers\n\u23f1\ufe0f  Total execution time: 1.4831 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.5449 seconds\n- Prime time: 0.9381 seconds\n- Total time: 1.4831 seconds\n- CPU cores used: 4\n",
      "parallelism_info": {
        "cores": 4
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 2.5638,
      "wall_time": 2.972480058670044,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 4\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 10000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.3834 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 2.1804 seconds\n[RESULT] Found 663625 prime numbers\n[TIME] Total execution time: 2.5638 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 4\n- Sequential threshold: 10,000 elements\n- Sort time: 0.3834s\n- Prime time: 2.1804s\n",
      "parallelism_info": {
        "cores": 4,
        "workers": 4
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 9.939,
      "wall_time": 13.582149505615234,
      "stdout": "\ud83d\udd27 Creating worker pool with 4 workers\n[PARALLEL] JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 4\nWorker pool size: 4\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 7.2380 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[CHUNKS] Divided into 4 chunks for prime counting\n[SUCCESS] Parallel prime counting completed in 2.7010 seconds\n[RESULT] Found 663,625 prime numbers\n[TIME] Total execution time: 9.9390 seconds\n\n[PERFORMANCE] Performance Details:\n- Active workers: 4\n- Completed tasks: 4\n",
      "parallelism_info": {
        "cores": 4,
        "workers": 4
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 3.7521,
      "wall_time": 7.380438327789307,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 4\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 10,000,000 integers\n   - Workers: 4\n   - Sequential threshold: 50,000\n   - Shared memory: 38.1 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 1.6296 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 2.1225 seconds\n[RESULT] Found 663,625 prime numbers\n\n[TIME] Total execution time: 3.7521 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 4\n- Sequential threshold: 50,000\n- Shared memory size: 38.1 MB\n- Sort time: 1.6296s\n- Prime time: 2.1225s\n",
      "parallelism_info": {
        "cores": 4,
        "workers": 4
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 5.4199,
      "wall_time": 7.218122959136963,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 1.8085 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 3.6114 seconds\nFound 663,625 prime numbers\nTotal execution time: 5.4199 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 10.5326,
      "wall_time": 12.096447706222534,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo merge sort completed in 2.0395 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 8.4931 seconds\nFound 663625 prime numbers\nTotal execution time: 10.5326 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 9.8992,
      "wall_time": 11.42583966255188,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 1.5225 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 8.3768 seconds\nFound 663625 prime numbers\nTotal execution time: 9.8992 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 3.8323,
      "wall_time": 4.3365538120269775,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nC merge sort completed in 1.4530 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 2.3793 seconds\nFound 663625 prime numbers\nTotal execution time: 3.8323 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 4.1664,
      "wall_time": 4.570904731750488,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nRust merge sort completed in 1.7696 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 2.3968 seconds\nFound 663625 prime numbers\nTotal execution time: 4.1664 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 8.158,
      "wall_time": 11.916292190551758,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 3.8620 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 4.2960 seconds\nFound 663,625 prime numbers\nTotal execution time: 8.1580 seconds\n",
      "parallelism_info": {}
    }
  }
}