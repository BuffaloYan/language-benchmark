{
  "timestamp": "2025-06-08T15:14:19.162589",
  "system_info": {
    "cpu_cores": 2,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 2.4997,
      "wall_time": 4.637373924255371,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 2\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 1.2929 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 1.2068 seconds\n\ud83c\udfaf Found 664,692 prime numbers\n\u23f1\ufe0f  Total execution time: 2.4997 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 2\n- Active thread count: 0\n- Steal count: 5\n",
      "parallelism_info": {
        "cores": 2,
        "parallelism": 2,
        "steal_count": 5
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 1.9504,
      "wall_time": 2.4188196659088135,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 2\nMax recursion depth: 3\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.7986 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 1.1518 seconds\n\ud83d\udcca Found 664692 prime numbers\n\u23f1\ufe0f  Total execution time: 1.9504 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.7986 seconds\n- Prime time: 1.1518 seconds\n- Total time: 1.9504 seconds\n- CPU cores used: 2\n",
      "parallelism_info": {
        "cores": 2
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 1.7974,
      "wall_time": 2.200573682785034,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 2\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 10000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.5007 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 1.2967 seconds\n[RESULT] Found 664692 prime numbers\n[TIME] Total execution time: 1.7974 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 2\n- Sequential threshold: 10,000 elements\n- Sort time: 0.5007s\n- Prime time: 1.2967s\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 9.167,
      "wall_time": 12.56322455406189,
      "stdout": "\ud83d\udd27 Creating worker pool with 2 workers\n[PARALLEL] JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 2\nWorker pool size: 2\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 7.3550 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[CHUNKS] Divided into 2 chunks for prime counting\n[SUCCESS] Parallel prime counting completed in 1.8120 seconds\n[RESULT] Found 664,692 prime numbers\n[TIME] Total execution time: 9.1670 seconds\n\n[PERFORMANCE] Performance Details:\n- Active workers: 2\n- Completed tasks: 2\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 2.8002,
      "wall_time": 6.129075050354004,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 2\n[DATA] Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 10,000,000 integers\n   - Workers: 2\n   - Sequential threshold: 50,000\n   - Shared memory: 38.1 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 1.4613 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 1.3389 seconds\n[RESULT] Found 664,692 prime numbers\n\n[TIME] Total execution time: 2.8002 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 2\n- Sequential threshold: 50,000\n- Shared memory size: 38.1 MB\n- Sort time: 1.4613s\n- Prime time: 1.3389s\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 3.9253,
      "wall_time": 5.863997459411621,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 1.8997 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 2.0255 seconds\nFound 664,692 prime numbers\nTotal execution time: 3.9253 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 5.4337,
      "wall_time": 7.380310535430908,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo merge sort completed in 2.1425 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 3.2913 seconds\nFound 664692 prime numbers\nTotal execution time: 5.4337 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 5.03,
      "wall_time": 6.838598966598511,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 1.7271 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 3.3029 seconds\nFound 664692 prime numbers\nTotal execution time: 5.0300 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 3.4855,
      "wall_time": 3.952313184738159,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nC merge sort completed in 1.4849 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 2.0006 seconds\nFound 664692 prime numbers\nTotal execution time: 3.4855 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 3.8039,
      "wall_time": 4.2030980587005615,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nRust merge sort completed in 1.7926 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 2.0113 seconds\nFound 664692 prime numbers\nTotal execution time: 3.8039 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 5.42,
      "wall_time": 9.016445636749268,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 3.2160 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 2.2040 seconds\nFound 664,692 prime numbers\nTotal execution time: 5.4200 seconds\n",
      "parallelism_info": {}
    }
  }
}