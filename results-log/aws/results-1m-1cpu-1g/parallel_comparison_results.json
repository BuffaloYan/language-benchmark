{
  "timestamp": "2025-06-08T12:40:38.396038",
  "system_info": {
    "cpu_cores": 1,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 0.7009,
      "wall_time": 1.3644483089447021,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 1\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 1,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.2913 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.4096 seconds\n\ud83c\udfaf Found 66,795 prime numbers\n\u23f1\ufe0f  Total execution time: 0.7009 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 1\n- Active thread count: 1\n- Steal count: 1\n",
      "parallelism_info": {
        "cores": 1,
        "parallelism": 1,
        "steal_count": 1
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 0.3954,
      "wall_time": 0.45188260078430176,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 1\nMax recursion depth: 2\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 1000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.1199 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.2755 seconds\n\ud83d\udcca Found 66795 prime numbers\n\u23f1\ufe0f  Total execution time: 0.3954 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.1199 seconds\n- Prime time: 0.2755 seconds\n- Total time: 0.3954 seconds\n- CPU cores used: 1\n",
      "parallelism_info": {
        "cores": 1
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 0.4753,
      "wall_time": 0.5225200653076172,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 1\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 1000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.0660 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.4093 seconds\n[RESULT] Found 66795 prime numbers\n[TIME] Total execution time: 0.4753 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 1\n- Sequential threshold: 10,000 elements\n- Sort time: 0.0660s\n- Prime time: 0.4093s\n",
      "parallelism_info": {
        "cores": 1,
        "workers": 1
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 1.297,
      "wall_time": 1.8992664813995361,
      "stdout": "\ud83d\udd27 Creating worker pool with 1 workers\n[PARALLEL] JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 1\nWorker pool size: 1\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 1,000,000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.7350 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[CHUNKS] Divided into 1 chunks for prime counting\n[SUCCESS] Parallel prime counting completed in 0.5620 seconds\n[RESULT] Found 66,795 prime numbers\n[TIME] Total execution time: 1.2970 seconds\n\n[PERFORMANCE] Performance Details:\n- Active workers: 1\n- Completed tasks: 1\n",
      "parallelism_info": {
        "cores": 1,
        "workers": 1
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 0.9926,
      "wall_time": 1.3874249458312988,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 1\n[DATA] Loading data...\nLoaded 1,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 1,000,000 integers\n   - Workers: 1\n   - Sequential threshold: 50,000\n   - Shared memory: 3.8 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.3906 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.6019 seconds\n[RESULT] Found 66,795 prime numbers\n\n[TIME] Total execution time: 0.9926 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 1\n- Sequential threshold: 50,000\n- Shared memory size: 3.8 MB\n- Sort time: 0.3906s\n- Prime time: 0.6019s\n",
      "parallelism_info": {
        "cores": 1,
        "workers": 1
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 0.6921,
      "wall_time": 1.4155311584472656,
      "stdout": "Loading data...\nLoaded 1,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 0.2724 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4197 seconds\nFound 66,795 prime numbers\nTotal execution time: 0.6921 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 1.1539,
      "wall_time": 1.323958396911621,
      "stdout": "Loading data...\nLoaded 1000000 numbers\nStarting merge sort...\nGo merge sort completed in 0.2129 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.9410 seconds\nFound 66795 prime numbers\nTotal execution time: 1.1539 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 1.0972,
      "wall_time": 1.2637951374053955,
      "stdout": "Loading data...\nLoaded 1000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 0.1418 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.9554 seconds\nFound 66795 prime numbers\nTotal execution time: 1.0972 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 0.3974,
      "wall_time": 0.45477795600891113,
      "stdout": "Loading data...\nLoaded 1000000 numbers\nStarting merge sort...\nC merge sort completed in 0.1211 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.2763 seconds\nFound 66795 prime numbers\nTotal execution time: 0.3974 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 0.4671,
      "wall_time": 0.5169739723205566,
      "stdout": "Loading data...\nLoaded 1000000 numbers\nStarting merge sort...\nRust merge sort completed in 0.1443 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.3227 seconds\nFound 66795 prime numbers\nTotal execution time: 0.4671 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 0.936,
      "wall_time": 1.464146614074707,
      "stdout": "Loading data...\nLoaded 1,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 0.4660 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4700 seconds\nFound 66,795 prime numbers\nTotal execution time: 0.9360 seconds\n",
      "parallelism_info": {}
    }
  }
}