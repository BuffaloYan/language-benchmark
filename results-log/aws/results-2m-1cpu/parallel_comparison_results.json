{
  "timestamp": "2025-06-08T14:31:42.197949",
  "system_info": {
    "cpu_cores": 2,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 0.8655,
      "wall_time": 1.6507184505462646,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 1\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 2,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.4385 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.4269 seconds\n\ud83c\udfaf Found 133,094 prime numbers\n\u23f1\ufe0f  Total execution time: 0.8655 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 1\n- Active thread count: 0\n- Steal count: 2\n",
      "parallelism_info": {
        "cores": 1,
        "parallelism": 1,
        "steal_count": 2
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 0.6709,
      "wall_time": 0.7667758464813232,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 2\nMax recursion depth: 3\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 2000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.2628 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.4081 seconds\n\ud83d\udcca Found 133094 prime numbers\n\u23f1\ufe0f  Total execution time: 0.6709 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.2628 seconds\n- Prime time: 0.4081 seconds\n- Total time: 0.6709 seconds\n- CPU cores used: 2\n",
      "parallelism_info": {
        "cores": 2
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 0.5648,
      "wall_time": 0.6689238548278809,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 1\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 2000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.1468 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.4180 seconds\n[RESULT] Found 133094 prime numbers\n[TIME] Total execution time: 0.5648 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 1\n- Sequential threshold: 10,000 elements\n- Sort time: 0.1468s\n- Prime time: 0.4180s\n",
      "parallelism_info": {
        "cores": 1,
        "workers": 1
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 1.894,
      "wall_time": 2.547822952270508,
      "stdout": "\ud83d\udd27 Creating worker pool with 2 workers\n[PARALLEL] JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 2\nWorker pool size: 2\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 2,000,000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 1.2920 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[CHUNKS] Divided into 2 chunks for prime counting\n[SUCCESS] Parallel prime counting completed in 0.6020 seconds\n[RESULT] Found 133,094 prime numbers\n[TIME] Total execution time: 1.8940 seconds\n\n[PERFORMANCE] Performance Details:\n- Active workers: 2\n- Completed tasks: 2\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 1.1125,
      "wall_time": 1.6756718158721924,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 2\n[DATA] Loading data...\nLoaded 2,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 2,000,000 integers\n   - Workers: 2\n   - Sequential threshold: 50,000\n   - Shared memory: 7.6 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.5787 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.5338 seconds\n[RESULT] Found 133,094 prime numbers\n\n[TIME] Total execution time: 1.1125 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 2\n- Sequential threshold: 50,000\n- Shared memory size: 7.6 MB\n- Sort time: 0.5787s\n- Prime time: 0.5338s\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 0.8669,
      "wall_time": 1.6087586879730225,
      "stdout": "Loading data...\nLoaded 2,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 0.4369 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4300 seconds\nFound 133,094 prime numbers\nTotal execution time: 0.8669 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 1.0875,
      "wall_time": 1.690678596496582,
      "stdout": "Loading data...\nLoaded 2000000 numbers\nStarting merge sort...\nGo merge sort completed in 0.4261 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.6615 seconds\nFound 133094 prime numbers\nTotal execution time: 1.0875 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 0.9673,
      "wall_time": 1.4525978565216064,
      "stdout": "Loading data...\nLoaded 2000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 0.2999 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.6674 seconds\nFound 133094 prime numbers\nTotal execution time: 0.9673 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 0.6636,
      "wall_time": 0.7541821002960205,
      "stdout": "Loading data...\nLoaded 2000000 numbers\nStarting merge sort...\nC merge sort completed in 0.2630 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4006 seconds\nFound 133094 prime numbers\nTotal execution time: 0.6636 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 0.7256,
      "wall_time": 0.8036015033721924,
      "stdout": "Loading data...\nLoaded 2000000 numbers\nStarting merge sort...\nRust merge sort completed in 0.3209 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4047 seconds\nFound 133094 prime numbers\nTotal execution time: 0.7256 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 1.038,
      "wall_time": 1.8412714004516602,
      "stdout": "Loading data...\nLoaded 2,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 0.5930 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.4450 seconds\nFound 133,094 prime numbers\nTotal execution time: 1.0380 seconds\n",
      "parallelism_info": {}
    }
  }
}