{
  "timestamp": "2025-06-08T14:47:05.654380",
  "system_info": {
    "cpu_cores": 2,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 2.1754,
      "wall_time": 3.8278439044952393,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 1\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 5,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 1.1282 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 1.0472 seconds\n\ud83c\udfaf Found 332,240 prime numbers\n\u23f1\ufe0f  Total execution time: 2.1754 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 1\n- Active thread count: 1\n- Steal count: 1\n",
      "parallelism_info": {
        "cores": 1,
        "parallelism": 1,
        "steal_count": 1
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 1.6873,
      "wall_time": 1.9215424060821533,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 2\nMax recursion depth: 3\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 5000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.6926 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.9946 seconds\n\ud83d\udcca Found 332240 prime numbers\n\u23f1\ufe0f  Total execution time: 1.6873 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.6926 seconds\n- Prime time: 0.9946 seconds\n- Total time: 1.6873 seconds\n- CPU cores used: 2\n",
      "parallelism_info": {
        "cores": 2
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 1.4549,
      "wall_time": 1.6660399436950684,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 1\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 5000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.4082 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 1.0467 seconds\n[RESULT] Found 332240 prime numbers\n[TIME] Total execution time: 1.4549 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 1\n- Sequential threshold: 10,000 elements\n- Sort time: 0.4082s\n- Prime time: 1.0467s\n",
      "parallelism_info": {
        "cores": 1,
        "workers": 1
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 4.999,
      "wall_time": 6.350848436355591,
      "stdout": "\ud83d\udd27 Creating worker pool with 2 workers\n[PARALLEL] JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 2\nWorker pool size: 2\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 5,000,000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 3.5250 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[CHUNKS] Divided into 2 chunks for prime counting\n[SUCCESS] Parallel prime counting completed in 1.4740 seconds\n[RESULT] Found 332,240 prime numbers\n[TIME] Total execution time: 4.9990 seconds\n\n[PERFORMANCE] Performance Details:\n- Active workers: 2\n- Completed tasks: 2\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 2.5233,
      "wall_time": 3.8078067302703857,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 2\n[DATA] Loading data...\nLoaded 5,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 5,000,000 integers\n   - Workers: 2\n   - Sequential threshold: 50,000\n   - Shared memory: 19.1 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 1.3513 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 1.1719 seconds\n[RESULT] Found 332,240 prime numbers\n\n[TIME] Total execution time: 2.5233 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 2\n- Sequential threshold: 50,000\n- Shared memory size: 19.1 MB\n- Sort time: 1.3513s\n- Prime time: 1.1719s\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 2.1222,
      "wall_time": 3.403949737548828,
      "stdout": "Loading data...\nLoaded 5,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 1.1023 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.0198 seconds\nFound 332,240 prime numbers\nTotal execution time: 2.1222 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 2.7814,
      "wall_time": 4.008593797683716,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nGo merge sort completed in 1.1152 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6662 seconds\nFound 332240 prime numbers\nTotal execution time: 2.7814 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 2.4621,
      "wall_time": 3.7295339107513428,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 0.8083 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6538 seconds\nFound 332240 prime numbers\nTotal execution time: 2.4621 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 1.7068,
      "wall_time": 1.9460492134094238,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nC merge sort completed in 0.7059 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.0009 seconds\nFound 332240 prime numbers\nTotal execution time: 1.7068 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 2.0601,
      "wall_time": 2.2587265968322754,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nRust merge sort completed in 0.8568 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.2033 seconds\nFound 332240 prime numbers\nTotal execution time: 2.0601 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 2.713,
      "wall_time": 4.11291766166687,
      "stdout": "Loading data...\nLoaded 5,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 1.5650 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.1480 seconds\nFound 332,240 prime numbers\nTotal execution time: 2.7130 seconds\n",
      "parallelism_info": {}
    }
  }
}