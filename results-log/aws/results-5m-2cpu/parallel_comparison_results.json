{
  "timestamp": "2025-06-08T14:36:35.866866",
  "system_info": {
    "cpu_cores": 2,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 1.1985,
      "wall_time": 2.3283398151397705,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 2\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 5,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.6549 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.5436 seconds\n\ud83c\udfaf Found 332,443 prime numbers\n\u23f1\ufe0f  Total execution time: 1.1985 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 2\n- Active thread count: 0\n- Steal count: 5\n",
      "parallelism_info": {
        "cores": 2,
        "parallelism": 2,
        "steal_count": 5
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 0.9687,
      "wall_time": 1.2055208683013916,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 2\nMax recursion depth: 3\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 5000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.3681 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 0.6006 seconds\n\ud83d\udcca Found 332443 prime numbers\n\u23f1\ufe0f  Total execution time: 0.9687 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 0.3681 seconds\n- Prime time: 0.6006 seconds\n- Total time: 0.9687 seconds\n- CPU cores used: 2\n",
      "parallelism_info": {
        "cores": 2
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 0.7617,
      "wall_time": 0.9658496379852295,
      "stdout": "[RUST-RAYON] Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 2\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 5000000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.2361 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.5255 seconds\n[RESULT] Found 332443 prime numbers\n[TIME] Total execution time: 0.7617 seconds\n\n[PERFORMANCE] Performance Details:\n- Rayon thread pool size: 2\n- Sequential threshold: 10,000 elements\n- Sort time: 0.2361s\n- Prime time: 0.5255s\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 4.278,
      "wall_time": 5.488291025161743,
      "stdout": "\ud83d\udd27 Creating worker pool with 2 workers\n[PARALLEL] JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 2\nWorker pool size: 2\nParallel threshold: 10,000 elements\n\n[DATA] Loading data...\nLoaded 5,000,000 numbers\n[SORT] Starting parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 3.3670 seconds\n[VERIFY] Sorting verified: true\n[PRIMES] Starting parallel prime counting...\n[CHUNKS] Divided into 2 chunks for prime counting\n[SUCCESS] Parallel prime counting completed in 0.9110 seconds\n[RESULT] Found 332,443 prime numbers\n[TIME] Total execution time: 4.2780 seconds\n\n[PERFORMANCE] Performance Details:\n- Active workers: 2\n- Completed tasks: 2\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 1.4461,
      "wall_time": 2.67425274848938,
      "stdout": "[SHAREDARRAYBUFFER] JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 2\n[DATA] Loading data...\nLoaded 5,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 5,000,000 integers\n   - Workers: 2\n   - Sequential threshold: 50,000\n   - Shared memory: 19.1 MB\n\n[SORT] Starting SharedArrayBuffer parallel merge sort...\n[SUCCESS] Parallel merge sort completed in 0.7306 seconds\n[VERIFY] Sorting verified: true\n\n[PRIMES] Starting SharedArrayBuffer parallel prime counting...\n[SUCCESS] Parallel prime counting completed in 0.7155 seconds\n[RESULT] Found 332,443 prime numbers\n\n[TIME] Total execution time: 1.4461 seconds\n\n[PERFORMANCE] Performance Details:\n- Workers used: 2\n- Sequential threshold: 50,000\n- Shared memory size: 19.1 MB\n- Sort time: 0.7306s\n- Prime time: 0.7155s\n",
      "parallelism_info": {
        "cores": 2,
        "workers": 2
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 2.0357,
      "wall_time": 3.1580703258514404,
      "stdout": "Loading data...\nLoaded 5,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 1.0183 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.0174 seconds\nFound 332,443 prime numbers\nTotal execution time: 2.0357 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 2.7131,
      "wall_time": 3.683303117752075,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nGo merge sort completed in 1.0593 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6539 seconds\nFound 332443 prime numbers\nTotal execution time: 2.7131 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 2.4539,
      "wall_time": 3.3956923484802246,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 0.8002 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6536 seconds\nFound 332443 prime numbers\nTotal execution time: 2.4539 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 1.7142,
      "wall_time": 1.9434990882873535,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nC merge sort completed in 0.7125 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.0018 seconds\nFound 332443 prime numbers\nTotal execution time: 1.7142 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 1.859,
      "wall_time": 2.0589258670806885,
      "stdout": "Loading data...\nLoaded 5000000 numbers\nStarting merge sort...\nRust merge sort completed in 0.8507 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.0083 seconds\nFound 332443 prime numbers\nTotal execution time: 1.8590 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 2.678,
      "wall_time": 3.9898643493652344,
      "stdout": "Loading data...\nLoaded 5,000,000 numbers\nStarting merge sort...\nJavaScript optimized merge sort completed in 1.5420 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.1360 seconds\nFound 332,443 prime numbers\nTotal execution time: 2.6780 seconds\n",
      "parallelism_info": {}
    }
  }
}