{
  "timestamp": "2025-06-07T03:26:04.852248",
  "system_info": {
    "cpu_cores": 6,
    "platform": "Linux",
    "python_version": "3.11.0"
  },
  "results": {
    "Java Fork-Join": {
      "success": true,
      "execution_time": 3.6839,
      "wall_time": 5.816101551055908,
      "stdout": "\ud83d\ude80 Java Parallel Merge Sort + Prime Counting\n============================================\nAvailable processors: 1\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 2.2675 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 1.4164 seconds\n\ud83c\udfaf Found 663,984 prime numbers\n\u23f1\ufe0f  Total execution time: 3.6839 seconds\n\n\ud83d\udcc8 Performance Details:\n- Pool parallelism: 1\n- Active thread count: 0\n- Steal count: 2\n",
      "parallelism_info": {
        "cores": 1,
        "parallelism": 1,
        "steal_count": 2
      }
    },
    "C pthreads": {
      "success": true,
      "execution_time": 6.1458,
      "wall_time": 6.448518514633179,
      "stdout": "\ud83d\ude80 C Parallel Merge Sort + Prime Counting\n=========================================\nAvailable processors: 6\nMax recursion depth: 4\nSequential threshold: 1000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 2.7898 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 3.3560 seconds\n\ud83d\udcca Found 663984 prime numbers\n\u23f1\ufe0f  Total execution time: 6.1458 seconds\n\n\ud83d\udcc8 Performance Analysis:\n- Sort time: 2.7898 seconds\n- Prime time: 3.3560 seconds\n- Total time: 6.1458 seconds\n- CPU cores used: 6\n",
      "parallelism_info": {
        "cores": 6
      }
    },
    "Rust Rayon": {
      "success": true,
      "execution_time": 2.9062,
      "wall_time": 3.245701551437378,
      "stdout": "\ud83e\udd80 Rust Parallel Merge Sort + Prime Counting\n============================================\nAvailable CPU cores: 1\nParallel threshold: 10,000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10000000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 0.8799 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\u2705 Parallel prime counting completed in 2.0263 seconds\n\ud83c\udfaf Found 663984 prime numbers\n\u23f1\ufe0f  Total execution time: 2.9062 seconds\n\n\ud83d\udcc8 Performance Details:\n- Rayon thread pool size: 1\n- Sequential threshold: 10,000 elements\n- Sort time: 0.8799s\n- Prime time: 2.0263s\n",
      "parallelism_info": {
        "cores": 1,
        "workers": 1
      }
    },
    "JavaScript Workers": {
      "success": true,
      "execution_time": 11.673,
      "wall_time": 15.287490606307983,
      "stdout": "\ud83d\udd27 Creating worker pool with 6 workers\n\ud83d\ude80 JavaScript Parallel Merge Sort + Prime Counting\n===================================================\nAvailable CPU cores: 6\nWorker pool size: 6\nParallel threshold: 10,000 elements\n\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd04 Starting parallel merge sort...\n\u2705 Parallel merge sort completed in 5.7790 seconds\n\ud83d\udd0d Sorting verified: true\n\ud83d\udd22 Starting parallel prime counting...\n\ud83d\udce6 Divided into 6 chunks for prime counting\n\u2705 Parallel prime counting completed in 5.8940 seconds\n\ud83c\udfaf Found 663,984 prime numbers\n\u23f1\ufe0f  Total execution time: 11.6730 seconds\n\n\ud83d\udcc8 Performance Details:\n- Active workers: 6\n- Completed tasks: 6\n",
      "parallelism_info": {
        "cores": 6,
        "workers": 6
      }
    },
    "JavaScript SharedArrayBuffer": {
      "success": true,
      "execution_time": 9.4998,
      "wall_time": 12.798444032669067,
      "stdout": "\ud83d\ude80 JavaScript SharedArrayBuffer Parallel Merge Sort + Prime Counting\n====================================================================\nAvailable CPU cores: 6\n\ud83d\udcca Loading data...\nLoaded 10,000,000 numbers\n\ud83d\udd27 SharedArrayBuffer Setup:\n   - Data size: 10,000,000 integers\n   - Workers: 6\n   - Sequential threshold: 50,000\n   - Shared memory: 38.1 MB\n\n\ud83d\udd04 Starting SharedArrayBuffer parallel merge sort...\n\u2705 Parallel merge sort completed in 4.2150 seconds\n\ud83d\udd0d Sorting verified: true\n\n\ud83d\udd22 Starting SharedArrayBuffer parallel prime counting...\n\u2705 Parallel prime counting completed in 5.2848 seconds\n\ud83c\udfaf Found 663,984 prime numbers\n\n\u23f1\ufe0f  Total execution time: 9.4998 seconds\n\n\ud83d\udcc8 Performance Details:\n- Workers used: 6\n- Sequential threshold: 50,000\n- Shared memory size: 38.1 MB\n- Sort time: 4.2150s\n- Prime time: 5.2848s\n",
      "parallelism_info": {
        "cores": 6,
        "workers": 6
      }
    },
    "Java Sequential": {
      "success": true,
      "execution_time": 3.4025,
      "wall_time": 6.10789680480957,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJava merge sort completed in 2.0100 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.3925 seconds\nFound 663,984 prime numbers\nTotal execution time: 3.4025 seconds\n",
      "parallelism_info": {}
    },
    "Go (original)": {
      "success": true,
      "execution_time": 4.2884,
      "wall_time": 5.181571960449219,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo merge sort completed in 2.6807 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6077 seconds\nFound 663984 prime numbers\nTotal execution time: 4.2884 seconds\n",
      "parallelism_info": {}
    },
    "Go (optimized)": {
      "success": true,
      "execution_time": 3.7809,
      "wall_time": 4.686163902282715,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nGo optimized merge sort completed in 2.1194 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.6615 seconds\nFound 663984 prime numbers\nTotal execution time: 3.7809 seconds\n",
      "parallelism_info": {}
    },
    "C Sequential": {
      "success": true,
      "execution_time": 1.3626,
      "wall_time": 3.0411593914031982,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nC merge sort completed in 0.8117 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 0.5509 seconds\nFound 663984 prime numbers\nTotal execution time: 1.3626 seconds\n",
      "parallelism_info": {}
    },
    "Rust Sequential": {
      "success": true,
      "execution_time": 3.2388,
      "wall_time": 3.5985829830169678,
      "stdout": "Loading data...\nLoaded 10000000 numbers\nStarting merge sort...\nRust merge sort completed in 1.9134 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.3254 seconds\nFound 663984 prime numbers\nTotal execution time: 3.2388 seconds\n",
      "parallelism_info": {}
    },
    "JavaScript Sequential": {
      "success": true,
      "execution_time": 6.801,
      "wall_time": 9.992262840270996,
      "stdout": "Loading data...\nLoaded 10,000,000 numbers\nStarting merge sort...\nJavaScript merge sort completed in 4.8120 seconds\nSorting verified: true\nCounting prime numbers...\nPrime counting completed in 1.9890 seconds\nFound 663,984 prime numbers\nTotal execution time: 6.8010 seconds\n",
      "parallelism_info": {}
    }
  }
}