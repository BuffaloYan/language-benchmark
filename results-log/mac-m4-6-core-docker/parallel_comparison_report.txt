================================================================================
PARALLEL IMPLEMENTATION COMPARISON REPORT
================================================================================
Generated: 2025-06-11 02:16:06
Test Data: 10,000,000 random integers
Task: Parallel merge sort + prime counting
System: 8 CPU cores, Linux

OVERALL PERFORMANCE RANKINGS:
--------------------------------------------------------------------------------
Rank Implementation                 Type       Exec Time    Wall Time    Speedup 
--------------------------------------------------------------------------------
1    C pthreads                     Parallel     0.2491s      0.3970s     1.00x
2    Rust Rayon                     Parallel     0.2548s      0.3882s     0.98x
3    Go Parallel                    Parallel     0.3884s      0.7770s     0.64x
4    Java Fork-Join                 Parallel     0.4032s      0.8018s     0.62x
5    JavaScript Workers             Parallel     0.6810s      2.5538s     0.37x
6    JavaScript SharedArrayBuffer   Parallel     0.8520s      1.9520s     0.29x
7    C Sequential                   Sequential   1.1097s      1.2581s     0.22x
8    Rust Sequential                Sequential   1.3238s      1.4624s     0.19x
9    Java Sequential                Sequential   1.4149s      1.8208s     0.18x
10   Go (optimized)                 Sequential   1.6089s      1.9656s     0.15x
11   JavaScript Sequential          Sequential   2.0080s      3.2628s     0.12x

PARALLEL EFFICIENCY ANALYSIS:
--------------------------------------------------------------------------------

Java:
  Parallel Implementation: Java Fork-Join
  Sequential Time:    1.4149s
  Parallel Time:      0.4032s
  Speedup:              3.51x
  Parallel Efficiency:  43.9%

C:
  Parallel Implementation: C pthreads
  Sequential Time:    1.1097s
  Parallel Time:      0.2491s
  Speedup:              4.45x
  Parallel Efficiency:  55.7%

Rust:
  Parallel Implementation: Rust Rayon
  Sequential Time:    1.3238s
  Parallel Time:      0.2548s
  Speedup:              5.20x
  Parallel Efficiency:  64.9%

JavaScript:
  Parallel Implementation: JavaScript Workers
  Sequential Time:    2.0080s
  Parallel Time:      0.6810s
  Speedup:              2.95x
  Parallel Efficiency:  36.9%

JavaScript Parallel Approaches Comparison:
  Sequential:         2.0080s (baseline)
  Worker Threads:     0.6810s (speedup: 2.95x, efficiency: 36.9%)
  SharedArrayBuffer:   0.8520s (speedup: 2.36x, efficiency: 29.5%)

Go Parallel vs Sequential Comparison:
  Sequential (optimized):   1.6089s (in-place algorithm)
  Parallel (goroutines):    0.3884s (parallel merge sort)
  Speedup:                   4.14x
  Parallel Efficiency:       51.8%

DETAILED RESULTS:
--------------------------------------------------------------------------------

Java Fork-Join:
  Status: SUCCESS
  Execution Time:   0.4032 seconds
  Wall Clock Time:   0.8018 seconds
  CPU Cores Used: 6
  Parallelism Level: 6

C pthreads:
  Status: SUCCESS
  Execution Time:   0.2491 seconds
  Wall Clock Time:   0.3970 seconds
  CPU Cores Used: 8

Rust Rayon:
  Status: SUCCESS
  Execution Time:   0.2548 seconds
  Wall Clock Time:   0.3882 seconds
  CPU Cores Used: 6
  Workers/Threads: 6

JavaScript Workers:
  Status: SUCCESS
  Execution Time:   0.6810 seconds
  Wall Clock Time:   2.5538 seconds
  CPU Cores Used: 8
  Workers/Threads: 8

JavaScript SharedArrayBuffer:
  Status: SUCCESS
  Execution Time:   0.8520 seconds
  Wall Clock Time:   1.9520 seconds
  CPU Cores Used: 8
  Workers/Threads: 8

Go Parallel:
  Status: SUCCESS
  Execution Time:   0.3884 seconds
  Wall Clock Time:   0.7770 seconds
  CPU Cores Used: 6

Java Sequential:
  Status: SUCCESS
  Execution Time:   1.4149 seconds
  Wall Clock Time:   1.8208 seconds

Go (optimized):
  Status: SUCCESS
  Execution Time:   1.6089 seconds
  Wall Clock Time:   1.9656 seconds

C Sequential:
  Status: SUCCESS
  Execution Time:   1.1097 seconds
  Wall Clock Time:   1.2581 seconds

Rust Sequential:
  Status: SUCCESS
  Execution Time:   1.3238 seconds
  Wall Clock Time:   1.4624 seconds

JavaScript Sequential:
  Status: SUCCESS
  Execution Time:   2.0080 seconds
  Wall Clock Time:   3.2628 seconds

PERFORMANCE SUMMARY:
--------------------------------------------------------------------------------
Execution Times:
  Fastest:   0.2491s
  Slowest:   2.0080s
  Average:   0.9358s
  Range:       8.06x difference

Wall Clock Times:
  Fastest:   0.3882s
  Slowest:   3.2628s
  Average:   1.5127s
  Range:       8.40x difference

SYSTEM INFORMATION:
--------------------------------------------------------------------------------
CPU Cores: 8
Platform: Linux
OS: Linux 6.10.14-linuxkit
Architecture: aarch64
Python Version: 3.11.0rc1

================================================================================
End of Report
================================================================================