================================================================================
PARALLEL IMPLEMENTATION COMPARISON REPORT
================================================================================
Generated: 2025-06-07 18:57:07
Test Data: 10,000,000 random integers
Task: Parallel merge sort + prime counting
System: 6 CPU cores, Linux

OVERALL PERFORMANCE RANKINGS:
--------------------------------------------------------------------------------
Rank Implementation                 Type       Exec Time    Wall Time    Speedup 
--------------------------------------------------------------------------------
1    C Sequential                   Sequential   1.3459s      3.0700s     1.00x
2    Rust Rayon                     Parallel     3.1637s      3.4909s     0.43x
3    Rust Sequential                Sequential   3.2042s      3.5115s     0.42x
4    Java Sequential                Sequential   3.4312s      6.1782s     0.39x
5    Java Fork-Join                 Parallel     3.4891s      5.7843s     0.39x
6    Go (optimized)                 Sequential   3.7096s      4.9077s     0.36x
7    Go (original)                  Sequential   4.2959s      5.4308s     0.31x
8    JavaScript Sequential          Sequential   4.4870s      7.7776s     0.30x
9    C pthreads                     Parallel     6.5848s      6.9053s     0.20x
10   JavaScript SharedArrayBuffer   Parallel    10.0518s     13.2022s     0.13x
11   JavaScript Workers             Parallel    11.6210s     15.2171s     0.12x

PARALLEL EFFICIENCY ANALYSIS:
--------------------------------------------------------------------------------

Java:
  Parallel Implementation: Java Fork-Join
  Sequential Time:    3.4312s
  Parallel Time:      3.4891s
  Speedup:              0.98x
  Parallel Efficiency:  16.4%

C:
  Parallel Implementation: C pthreads
  Sequential Time:    1.3459s
  Parallel Time:      6.5848s
  Speedup:              0.20x
  Parallel Efficiency:   3.4%

Rust:
  Parallel Implementation: Rust Rayon
  Sequential Time:    3.2042s
  Parallel Time:      3.1637s
  Speedup:              1.01x
  Parallel Efficiency:  16.9%

JavaScript:
  Parallel Implementation: JavaScript Workers
  Sequential Time:    4.4870s
  Parallel Time:     11.6210s
  Speedup:              0.39x
  Parallel Efficiency:   6.4%

JavaScript Parallel Approaches Comparison:
  Sequential:         4.4870s (baseline)
  Worker Threads:    11.6210s (speedup: 0.39x, efficiency: 6.4%)
  SharedArrayBuffer:  10.0518s (speedup: 0.45x, efficiency: 7.4%)

Go Algorithm Comparison (Single-threaded):
  Original Algorithm:     4.2959s (memory allocating)
  Optimized Algorithm:    3.7096s (in-place)
  Improvement:              13.6% (1.16x speedup)

DETAILED RESULTS:
--------------------------------------------------------------------------------

Java Fork-Join:
  Status: SUCCESS
  Execution Time:   3.4891 seconds
  Wall Clock Time:   5.7843 seconds
  CPU Cores Used: 1
  Parallelism Level: 1

C pthreads:
  Status: SUCCESS
  Execution Time:   6.5848 seconds
  Wall Clock Time:   6.9053 seconds
  CPU Cores Used: 6

Rust Rayon:
  Status: SUCCESS
  Execution Time:   3.1637 seconds
  Wall Clock Time:   3.4909 seconds
  CPU Cores Used: 1
  Workers/Threads: 1

JavaScript Workers:
  Status: SUCCESS
  Execution Time:  11.6210 seconds
  Wall Clock Time:  15.2171 seconds
  CPU Cores Used: 6
  Workers/Threads: 6

JavaScript SharedArrayBuffer:
  Status: SUCCESS
  Execution Time:  10.0518 seconds
  Wall Clock Time:  13.2022 seconds
  CPU Cores Used: 6
  Workers/Threads: 6

Java Sequential:
  Status: SUCCESS
  Execution Time:   3.4312 seconds
  Wall Clock Time:   6.1782 seconds

Go (original):
  Status: SUCCESS
  Execution Time:   4.2959 seconds
  Wall Clock Time:   5.4308 seconds

Go (optimized):
  Status: SUCCESS
  Execution Time:   3.7096 seconds
  Wall Clock Time:   4.9077 seconds

C Sequential:
  Status: SUCCESS
  Execution Time:   1.3459 seconds
  Wall Clock Time:   3.0700 seconds

Rust Sequential:
  Status: SUCCESS
  Execution Time:   3.2042 seconds
  Wall Clock Time:   3.5115 seconds

JavaScript Sequential:
  Status: SUCCESS
  Execution Time:   4.4870 seconds
  Wall Clock Time:   7.7776 seconds

PERFORMANCE SUMMARY:
--------------------------------------------------------------------------------
Execution Times:
  Fastest:   1.3459s
  Slowest:  11.6210s
  Average:   5.0349s
  Range:       8.63x difference

Wall Clock Times:
  Fastest:   3.0700s
  Slowest:  15.2171s
  Average:   6.8614s
  Range:       4.96x difference

SYSTEM INFORMATION:
--------------------------------------------------------------------------------
CPU Cores: 6
Platform: Linux
OS: Linux 6.10.14-linuxkit
Architecture: aarch64
Python Version: 3.11.0rc1

================================================================================
End of Report
================================================================================